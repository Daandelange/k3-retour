name: CI
on: [push, pull_request]

jobs:
  tests:
    name: PHP ${{ matrix.php }} (${{ matrix.dependencies }} deps)

    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ["7.4", "8.0", "8.1"]
        dependencies: ["lowest", "locked"]
    env:
      extensions: mbstring, pcov
      ini: pcov.directory=., "pcov.exclude=\"~(vendor|tests)~\""

    steps:
      - name: Checkout
        uses: actions/checkout@f1d3225b5376a0791fdee5a0e8eac5289355e43a # pin@v2

      - name: Setup PHP cache environment
        id: ext-cache
        uses: shivammathur/cache-extensions@8828d749a642ae651470bd7713c2266c82cac102 # pin@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.extensions }}
          key: php-v1

      - name: Cache PHP extensions
        uses: actions/cache@1c6fb82ebbd610035c324e764e5e74d0e82f8a60 # pin@v2
        with:
          path: ${{ steps.ext-cache.outputs.dir }}
          key: ${{ steps.ext-cache.outputs.key }}
          restore-keys: ${{ steps.ext-cache.outputs.key }}

      - name: Setup PHP environment
        uses: shivammathur/setup-php@ed52ff9a52991475b075a4c2144f7276195e8620 # pin@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.extensions }}
          ini-values: ${{ env.ini }}
          coverage: pcov
          tools: phpunit:9.5.10, psalm:4.11.2

      - name: Setup problem matchers
        run: |
          echo "::add-matcher::${{ runner.tool_cache }}/php.json"
          echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Cache analysis data
        id: finishPrepare
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # pin@v2
        with:
          path: ~/.cache/psalm
          key: backend-analysis-${{ matrix.php }}

      - name: Run tests
        if: always() && steps.finishPrepare.outcome == 'success'
        run: phpunit --coverage-clover ${{ github.workspace }}/clover.xml

      - name: Statically analyze using Psalm
        if: always() && steps.finishPrepare.outcome == 'success'
        run: psalm --output-format=github --php-version=${{ matrix.php }} --report=sarif/psalm.sarif --report-show-info=false

      - name: Upload coverage results to Codecov
        uses: codecov/codecov-action@a1ed4b322b4b38cb846afb5a0ebfa17086917d27 # pin@v1
        with:
          file: ${{ github.workspace }}/clover.xml
          flags: backend
          env_vars: PHP
        env:
          PHP: ${{ matrix.php }}

  analysis:
    name: Analysis

    runs-on: ubuntu-latest
    env:
      php: "8.0"
      extensions: mbstring, ctype, curl

    steps:
      - name: Checkout
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pin@v2

      - name: Preparations
        run: mkdir sarif

      - name: Setup PHP cache environment
        id: ext-cache
        uses: shivammathur/cache-extensions@2e789925e438042ecda2b83f0fd00bbc016da76e # pin@v1
        with:
          php-version: ${{ env.php }}
          extensions: ${{ env.extensions }}
          key: php-analysis-v1

      - name: Cache PHP extensions
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # pin@v2
        with:
          path: ${{ steps.ext-cache.outputs.dir }}
          key: ${{ steps.ext-cache.outputs.key }}
          restore-keys: ${{ steps.ext-cache.outputs.key }}

      - name: Setup PHP environment
        id: finishPrepare
        uses: shivammathur/setup-php@e2e76ea34f2059c0d66bf5c54ea75610185397f3 # pin@v2
        with:
          php-version: ${{ env.php }}
          extensions: ${{ env.extensions }}
          coverage: none
          tools: |
            composer:2.2.0, composer-normalize:2.18.0, composer-require-checker:4.0.0,
            composer-unused:0.7.10, phpcpd:6.0.3, phpmd:2.11.1

      - name: Validate composer.json/composer.lock
        if: always() && steps.finishPrepare.outcome == 'success'
        run: composer validate --strict --no-check-version --no-check-all

      - name: Ensure that composer.json is normalized
        if: always() && steps.finishPrepare.outcome == 'success'
        run: composer-normalize --dry-run

      - name: Check for unused Composer dependencies
        if: always() && steps.finishPrepare.outcome == 'success'
        run: composer unused --no-progress

      - name: Check for duplicated code
        if: always() && steps.finishPrepare.outcome == 'success'
        run: phpcpd --fuzzy --exclude tests --exclude vendor .

      - name: Statically analyze using PHPMD
        if: always() && steps.finishPrepare.outcome == 'success'
        run: phpmd . github phpmd.xml.dist --exclude 'dependencies/*,tests/*,vendor/*' --reportfile-sarif sarif/phpmd.sarif

  coding-style:
    name: Coding Style & Frontend Analysis

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pin@v2

      - name: Set up Node.js problem matchers and cache npm dependencies
        uses: actions/setup-node@04c56d2f954f1e4c69436aa54cfef261a018f458 # pin@v2
        with:
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install npm dependencies
        run: npm ci
        working-directory: panel

      - name: Setup PHP environment
        uses: shivammathur/setup-php@e2e76ea34f2059c0d66bf5c54ea75610185397f3 # pin@v2
        with:
          php-version: ${{ env.php }}
          coverage: none
          tools: php-cs-fixer:3.2.1

      - name: Cache analysis data
        id: finishPrepare
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # pin@v2
        with:
          path: ~/.php-cs-fixer
          key: coding-style

      - name: Check for JavaScript coding style violations (ESLint)
        if: always() && steps.finishPrepare.outcome == 'success'
        # Use the --no-fix flag in push builds to get a failed CI status
        run: >
          npm run lint -- --max-warnings 0 --format stylish
          ${{ github.event_name != 'pull_request' && '--no-fix' || '' }}
        working-directory: panel

      - name: Create code suggestions from the coding style changes (on PR only)
        if: >
          always() && steps.finishPrepare.outcome == 'success' &&
          github.event_name == 'pull_request'
        uses: reviewdog/action-suggester@1b18099af6c3c023256eb87a27aab5623e9b934d # pin@v1
        with:
          tool_name: ESLint
          fail_on_error: "true"

      - name: Check for JavaScript coding style violations (Prettier)
        if: always() && steps.finishPrepare.outcome == 'success'
        # Use the --check flag in push builds to get a failed CI status
        run: >
          npm run format --
          ${{ github.event_name != 'pull_request' && '--check' || '--write' }}
        working-directory: panel

      - name: Create code suggestions from the coding style changes (on PR only)
        if: >
          always() && steps.finishPrepare.outcome == 'success' &&
          github.event_name == 'pull_request'
        uses: reviewdog/action-suggester@1b18099af6c3c023256eb87a27aab5623e9b934d # pin@v1
        with:
          tool_name: Prettier
          fail_on_error: "true"

      - name: Check for PHP coding style violations
        if: always() && steps.finishPrepare.outcome == 'success'
        # Use the --dry-run flag in push builds to get a failed CI status
        run: >
          php-cs-fixer fix --diff
          ${{ github.event_name != 'pull_request' && '--dry-run' || '' }}

      - name: Create code suggestions from the coding style changes (on PR only)
        if: >
          always() && steps.finishPrepare.outcome == 'success' &&
          github.event_name == 'pull_request'
        uses: reviewdog/action-suggester@1b18099af6c3c023256eb87a27aab5623e9b934d # pin@v1
        with:
          tool_name: PHP-CS-Fixer
          fail_on_error: "true"
